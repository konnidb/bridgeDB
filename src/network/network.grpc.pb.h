// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: network.proto
#ifndef GRPC_network_2eproto__INCLUDED
#define GRPC_network_2eproto__INCLUDED

#include "network.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc_impl {
class CompletionQueue;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc_impl

namespace grpc {
namespace experimental {
template <typename RequestT, typename ResponseT>
class MessageAllocator;
}  // namespace experimental
}  // namespace grpc

namespace network {

// Service
class Network final {
 public:
  static constexpr char const* service_full_name() {
    return "network.Network";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status executeQuery(::grpc::ClientContext* context, const ::network::Query& request, ::network::QueryResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::network::QueryResponse>> AsyncexecuteQuery(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::network::QueryResponse>>(AsyncexecuteQueryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::network::QueryResponse>> PrepareAsyncexecuteQuery(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::network::QueryResponse>>(PrepareAsyncexecuteQueryRaw(context, request, cq));
    }
    virtual ::grpc::Status createNode(::grpc::ClientContext* context, const ::network::Query& request, ::network::QueryResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::network::QueryResponse>> AsynccreateNode(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::network::QueryResponse>>(AsynccreateNodeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::network::QueryResponse>> PrepareAsynccreateNode(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::network::QueryResponse>>(PrepareAsynccreateNodeRaw(context, request, cq));
    }
    virtual ::grpc::Status deleteNode(::grpc::ClientContext* context, const ::network::Query& request, ::network::QueryResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::network::QueryResponse>> AsyncdeleteNode(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::network::QueryResponse>>(AsyncdeleteNodeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::network::QueryResponse>> PrepareAsyncdeleteNode(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::network::QueryResponse>>(PrepareAsyncdeleteNodeRaw(context, request, cq));
    }
    virtual ::grpc::Status createRelation(::grpc::ClientContext* context, const ::network::Query& request, ::network::QueryResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::network::QueryResponse>> AsynccreateRelation(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::network::QueryResponse>>(AsynccreateRelationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::network::QueryResponse>> PrepareAsynccreateRelation(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::network::QueryResponse>>(PrepareAsynccreateRelationRaw(context, request, cq));
    }
    virtual ::grpc::Status createEdge(::grpc::ClientContext* context, const ::network::Query& request, ::network::QueryResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::network::QueryResponse>> AsynccreateEdge(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::network::QueryResponse>>(AsynccreateEdgeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::network::QueryResponse>> PrepareAsynccreateEdge(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::network::QueryResponse>>(PrepareAsynccreateEdgeRaw(context, request, cq));
    }
    virtual ::grpc::Status deleteEdge(::grpc::ClientContext* context, const ::network::Query& request, ::network::QueryResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::network::QueryResponse>> AsyncdeleteEdge(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::network::QueryResponse>>(AsyncdeleteEdgeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::network::QueryResponse>> PrepareAsyncdeleteEdge(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::network::QueryResponse>>(PrepareAsyncdeleteEdgeRaw(context, request, cq));
    }
    virtual ::grpc::Status searchNodeById(::grpc::ClientContext* context, const ::network::Query& request, ::network::QueryResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::network::QueryResponse>> AsyncsearchNodeById(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::network::QueryResponse>>(AsyncsearchNodeByIdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::network::QueryResponse>> PrepareAsyncsearchNodeById(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::network::QueryResponse>>(PrepareAsyncsearchNodeByIdRaw(context, request, cq));
    }
    virtual ::grpc::Status searchNodeByCondition(::grpc::ClientContext* context, const ::network::Query& request, ::network::QueryResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::network::QueryResponse>> AsyncsearchNodeByCondition(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::network::QueryResponse>>(AsyncsearchNodeByConditionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::network::QueryResponse>> PrepareAsyncsearchNodeByCondition(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::network::QueryResponse>>(PrepareAsyncsearchNodeByConditionRaw(context, request, cq));
    }
    virtual ::grpc::Status searchNode(::grpc::ClientContext* context, const ::network::Query& request, ::network::QueryResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::network::QueryResponse>> AsyncsearchNode(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::network::QueryResponse>>(AsyncsearchNodeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::network::QueryResponse>> PrepareAsyncsearchNode(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::network::QueryResponse>>(PrepareAsyncsearchNodeRaw(context, request, cq));
    }
    virtual ::grpc::Status auth(::grpc::ClientContext* context, const ::network::Credentials& request, ::network::AuthResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::network::AuthResponse>> Asyncauth(::grpc::ClientContext* context, const ::network::Credentials& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::network::AuthResponse>>(AsyncauthRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::network::AuthResponse>> PrepareAsyncauth(::grpc::ClientContext* context, const ::network::Credentials& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::network::AuthResponse>>(PrepareAsyncauthRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void executeQuery(::grpc::ClientContext* context, const ::network::Query* request, ::network::QueryResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void executeQuery(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::network::QueryResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void executeQuery(::grpc::ClientContext* context, const ::network::Query* request, ::network::QueryResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void executeQuery(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::network::QueryResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void createNode(::grpc::ClientContext* context, const ::network::Query* request, ::network::QueryResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void createNode(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::network::QueryResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void createNode(::grpc::ClientContext* context, const ::network::Query* request, ::network::QueryResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void createNode(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::network::QueryResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void deleteNode(::grpc::ClientContext* context, const ::network::Query* request, ::network::QueryResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void deleteNode(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::network::QueryResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void deleteNode(::grpc::ClientContext* context, const ::network::Query* request, ::network::QueryResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void deleteNode(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::network::QueryResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void createRelation(::grpc::ClientContext* context, const ::network::Query* request, ::network::QueryResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void createRelation(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::network::QueryResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void createRelation(::grpc::ClientContext* context, const ::network::Query* request, ::network::QueryResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void createRelation(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::network::QueryResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void createEdge(::grpc::ClientContext* context, const ::network::Query* request, ::network::QueryResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void createEdge(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::network::QueryResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void createEdge(::grpc::ClientContext* context, const ::network::Query* request, ::network::QueryResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void createEdge(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::network::QueryResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void deleteEdge(::grpc::ClientContext* context, const ::network::Query* request, ::network::QueryResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void deleteEdge(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::network::QueryResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void deleteEdge(::grpc::ClientContext* context, const ::network::Query* request, ::network::QueryResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void deleteEdge(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::network::QueryResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void searchNodeById(::grpc::ClientContext* context, const ::network::Query* request, ::network::QueryResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void searchNodeById(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::network::QueryResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void searchNodeById(::grpc::ClientContext* context, const ::network::Query* request, ::network::QueryResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void searchNodeById(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::network::QueryResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void searchNodeByCondition(::grpc::ClientContext* context, const ::network::Query* request, ::network::QueryResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void searchNodeByCondition(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::network::QueryResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void searchNodeByCondition(::grpc::ClientContext* context, const ::network::Query* request, ::network::QueryResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void searchNodeByCondition(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::network::QueryResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void searchNode(::grpc::ClientContext* context, const ::network::Query* request, ::network::QueryResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void searchNode(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::network::QueryResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void searchNode(::grpc::ClientContext* context, const ::network::Query* request, ::network::QueryResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void searchNode(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::network::QueryResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void auth(::grpc::ClientContext* context, const ::network::Credentials* request, ::network::AuthResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void auth(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::network::AuthResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void auth(::grpc::ClientContext* context, const ::network::Credentials* request, ::network::AuthResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void auth(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::network::AuthResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::network::QueryResponse>* AsyncexecuteQueryRaw(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::network::QueryResponse>* PrepareAsyncexecuteQueryRaw(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::network::QueryResponse>* AsynccreateNodeRaw(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::network::QueryResponse>* PrepareAsynccreateNodeRaw(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::network::QueryResponse>* AsyncdeleteNodeRaw(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::network::QueryResponse>* PrepareAsyncdeleteNodeRaw(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::network::QueryResponse>* AsynccreateRelationRaw(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::network::QueryResponse>* PrepareAsynccreateRelationRaw(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::network::QueryResponse>* AsynccreateEdgeRaw(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::network::QueryResponse>* PrepareAsynccreateEdgeRaw(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::network::QueryResponse>* AsyncdeleteEdgeRaw(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::network::QueryResponse>* PrepareAsyncdeleteEdgeRaw(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::network::QueryResponse>* AsyncsearchNodeByIdRaw(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::network::QueryResponse>* PrepareAsyncsearchNodeByIdRaw(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::network::QueryResponse>* AsyncsearchNodeByConditionRaw(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::network::QueryResponse>* PrepareAsyncsearchNodeByConditionRaw(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::network::QueryResponse>* AsyncsearchNodeRaw(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::network::QueryResponse>* PrepareAsyncsearchNodeRaw(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::network::AuthResponse>* AsyncauthRaw(::grpc::ClientContext* context, const ::network::Credentials& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::network::AuthResponse>* PrepareAsyncauthRaw(::grpc::ClientContext* context, const ::network::Credentials& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status executeQuery(::grpc::ClientContext* context, const ::network::Query& request, ::network::QueryResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::network::QueryResponse>> AsyncexecuteQuery(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::network::QueryResponse>>(AsyncexecuteQueryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::network::QueryResponse>> PrepareAsyncexecuteQuery(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::network::QueryResponse>>(PrepareAsyncexecuteQueryRaw(context, request, cq));
    }
    ::grpc::Status createNode(::grpc::ClientContext* context, const ::network::Query& request, ::network::QueryResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::network::QueryResponse>> AsynccreateNode(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::network::QueryResponse>>(AsynccreateNodeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::network::QueryResponse>> PrepareAsynccreateNode(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::network::QueryResponse>>(PrepareAsynccreateNodeRaw(context, request, cq));
    }
    ::grpc::Status deleteNode(::grpc::ClientContext* context, const ::network::Query& request, ::network::QueryResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::network::QueryResponse>> AsyncdeleteNode(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::network::QueryResponse>>(AsyncdeleteNodeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::network::QueryResponse>> PrepareAsyncdeleteNode(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::network::QueryResponse>>(PrepareAsyncdeleteNodeRaw(context, request, cq));
    }
    ::grpc::Status createRelation(::grpc::ClientContext* context, const ::network::Query& request, ::network::QueryResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::network::QueryResponse>> AsynccreateRelation(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::network::QueryResponse>>(AsynccreateRelationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::network::QueryResponse>> PrepareAsynccreateRelation(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::network::QueryResponse>>(PrepareAsynccreateRelationRaw(context, request, cq));
    }
    ::grpc::Status createEdge(::grpc::ClientContext* context, const ::network::Query& request, ::network::QueryResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::network::QueryResponse>> AsynccreateEdge(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::network::QueryResponse>>(AsynccreateEdgeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::network::QueryResponse>> PrepareAsynccreateEdge(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::network::QueryResponse>>(PrepareAsynccreateEdgeRaw(context, request, cq));
    }
    ::grpc::Status deleteEdge(::grpc::ClientContext* context, const ::network::Query& request, ::network::QueryResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::network::QueryResponse>> AsyncdeleteEdge(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::network::QueryResponse>>(AsyncdeleteEdgeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::network::QueryResponse>> PrepareAsyncdeleteEdge(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::network::QueryResponse>>(PrepareAsyncdeleteEdgeRaw(context, request, cq));
    }
    ::grpc::Status searchNodeById(::grpc::ClientContext* context, const ::network::Query& request, ::network::QueryResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::network::QueryResponse>> AsyncsearchNodeById(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::network::QueryResponse>>(AsyncsearchNodeByIdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::network::QueryResponse>> PrepareAsyncsearchNodeById(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::network::QueryResponse>>(PrepareAsyncsearchNodeByIdRaw(context, request, cq));
    }
    ::grpc::Status searchNodeByCondition(::grpc::ClientContext* context, const ::network::Query& request, ::network::QueryResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::network::QueryResponse>> AsyncsearchNodeByCondition(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::network::QueryResponse>>(AsyncsearchNodeByConditionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::network::QueryResponse>> PrepareAsyncsearchNodeByCondition(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::network::QueryResponse>>(PrepareAsyncsearchNodeByConditionRaw(context, request, cq));
    }
    ::grpc::Status searchNode(::grpc::ClientContext* context, const ::network::Query& request, ::network::QueryResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::network::QueryResponse>> AsyncsearchNode(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::network::QueryResponse>>(AsyncsearchNodeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::network::QueryResponse>> PrepareAsyncsearchNode(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::network::QueryResponse>>(PrepareAsyncsearchNodeRaw(context, request, cq));
    }
    ::grpc::Status auth(::grpc::ClientContext* context, const ::network::Credentials& request, ::network::AuthResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::network::AuthResponse>> Asyncauth(::grpc::ClientContext* context, const ::network::Credentials& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::network::AuthResponse>>(AsyncauthRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::network::AuthResponse>> PrepareAsyncauth(::grpc::ClientContext* context, const ::network::Credentials& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::network::AuthResponse>>(PrepareAsyncauthRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void executeQuery(::grpc::ClientContext* context, const ::network::Query* request, ::network::QueryResponse* response, std::function<void(::grpc::Status)>) override;
      void executeQuery(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::network::QueryResponse* response, std::function<void(::grpc::Status)>) override;
      void executeQuery(::grpc::ClientContext* context, const ::network::Query* request, ::network::QueryResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void executeQuery(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::network::QueryResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void createNode(::grpc::ClientContext* context, const ::network::Query* request, ::network::QueryResponse* response, std::function<void(::grpc::Status)>) override;
      void createNode(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::network::QueryResponse* response, std::function<void(::grpc::Status)>) override;
      void createNode(::grpc::ClientContext* context, const ::network::Query* request, ::network::QueryResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void createNode(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::network::QueryResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void deleteNode(::grpc::ClientContext* context, const ::network::Query* request, ::network::QueryResponse* response, std::function<void(::grpc::Status)>) override;
      void deleteNode(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::network::QueryResponse* response, std::function<void(::grpc::Status)>) override;
      void deleteNode(::grpc::ClientContext* context, const ::network::Query* request, ::network::QueryResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void deleteNode(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::network::QueryResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void createRelation(::grpc::ClientContext* context, const ::network::Query* request, ::network::QueryResponse* response, std::function<void(::grpc::Status)>) override;
      void createRelation(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::network::QueryResponse* response, std::function<void(::grpc::Status)>) override;
      void createRelation(::grpc::ClientContext* context, const ::network::Query* request, ::network::QueryResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void createRelation(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::network::QueryResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void createEdge(::grpc::ClientContext* context, const ::network::Query* request, ::network::QueryResponse* response, std::function<void(::grpc::Status)>) override;
      void createEdge(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::network::QueryResponse* response, std::function<void(::grpc::Status)>) override;
      void createEdge(::grpc::ClientContext* context, const ::network::Query* request, ::network::QueryResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void createEdge(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::network::QueryResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void deleteEdge(::grpc::ClientContext* context, const ::network::Query* request, ::network::QueryResponse* response, std::function<void(::grpc::Status)>) override;
      void deleteEdge(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::network::QueryResponse* response, std::function<void(::grpc::Status)>) override;
      void deleteEdge(::grpc::ClientContext* context, const ::network::Query* request, ::network::QueryResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void deleteEdge(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::network::QueryResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void searchNodeById(::grpc::ClientContext* context, const ::network::Query* request, ::network::QueryResponse* response, std::function<void(::grpc::Status)>) override;
      void searchNodeById(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::network::QueryResponse* response, std::function<void(::grpc::Status)>) override;
      void searchNodeById(::grpc::ClientContext* context, const ::network::Query* request, ::network::QueryResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void searchNodeById(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::network::QueryResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void searchNodeByCondition(::grpc::ClientContext* context, const ::network::Query* request, ::network::QueryResponse* response, std::function<void(::grpc::Status)>) override;
      void searchNodeByCondition(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::network::QueryResponse* response, std::function<void(::grpc::Status)>) override;
      void searchNodeByCondition(::grpc::ClientContext* context, const ::network::Query* request, ::network::QueryResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void searchNodeByCondition(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::network::QueryResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void searchNode(::grpc::ClientContext* context, const ::network::Query* request, ::network::QueryResponse* response, std::function<void(::grpc::Status)>) override;
      void searchNode(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::network::QueryResponse* response, std::function<void(::grpc::Status)>) override;
      void searchNode(::grpc::ClientContext* context, const ::network::Query* request, ::network::QueryResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void searchNode(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::network::QueryResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void auth(::grpc::ClientContext* context, const ::network::Credentials* request, ::network::AuthResponse* response, std::function<void(::grpc::Status)>) override;
      void auth(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::network::AuthResponse* response, std::function<void(::grpc::Status)>) override;
      void auth(::grpc::ClientContext* context, const ::network::Credentials* request, ::network::AuthResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void auth(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::network::AuthResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::network::QueryResponse>* AsyncexecuteQueryRaw(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::network::QueryResponse>* PrepareAsyncexecuteQueryRaw(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::network::QueryResponse>* AsynccreateNodeRaw(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::network::QueryResponse>* PrepareAsynccreateNodeRaw(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::network::QueryResponse>* AsyncdeleteNodeRaw(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::network::QueryResponse>* PrepareAsyncdeleteNodeRaw(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::network::QueryResponse>* AsynccreateRelationRaw(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::network::QueryResponse>* PrepareAsynccreateRelationRaw(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::network::QueryResponse>* AsynccreateEdgeRaw(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::network::QueryResponse>* PrepareAsynccreateEdgeRaw(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::network::QueryResponse>* AsyncdeleteEdgeRaw(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::network::QueryResponse>* PrepareAsyncdeleteEdgeRaw(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::network::QueryResponse>* AsyncsearchNodeByIdRaw(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::network::QueryResponse>* PrepareAsyncsearchNodeByIdRaw(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::network::QueryResponse>* AsyncsearchNodeByConditionRaw(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::network::QueryResponse>* PrepareAsyncsearchNodeByConditionRaw(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::network::QueryResponse>* AsyncsearchNodeRaw(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::network::QueryResponse>* PrepareAsyncsearchNodeRaw(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::network::AuthResponse>* AsyncauthRaw(::grpc::ClientContext* context, const ::network::Credentials& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::network::AuthResponse>* PrepareAsyncauthRaw(::grpc::ClientContext* context, const ::network::Credentials& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_executeQuery_;
    const ::grpc::internal::RpcMethod rpcmethod_createNode_;
    const ::grpc::internal::RpcMethod rpcmethod_deleteNode_;
    const ::grpc::internal::RpcMethod rpcmethod_createRelation_;
    const ::grpc::internal::RpcMethod rpcmethod_createEdge_;
    const ::grpc::internal::RpcMethod rpcmethod_deleteEdge_;
    const ::grpc::internal::RpcMethod rpcmethod_searchNodeById_;
    const ::grpc::internal::RpcMethod rpcmethod_searchNodeByCondition_;
    const ::grpc::internal::RpcMethod rpcmethod_searchNode_;
    const ::grpc::internal::RpcMethod rpcmethod_auth_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status executeQuery(::grpc::ServerContext* context, const ::network::Query* request, ::network::QueryResponse* response);
    virtual ::grpc::Status createNode(::grpc::ServerContext* context, const ::network::Query* request, ::network::QueryResponse* response);
    virtual ::grpc::Status deleteNode(::grpc::ServerContext* context, const ::network::Query* request, ::network::QueryResponse* response);
    virtual ::grpc::Status createRelation(::grpc::ServerContext* context, const ::network::Query* request, ::network::QueryResponse* response);
    virtual ::grpc::Status createEdge(::grpc::ServerContext* context, const ::network::Query* request, ::network::QueryResponse* response);
    virtual ::grpc::Status deleteEdge(::grpc::ServerContext* context, const ::network::Query* request, ::network::QueryResponse* response);
    virtual ::grpc::Status searchNodeById(::grpc::ServerContext* context, const ::network::Query* request, ::network::QueryResponse* response);
    virtual ::grpc::Status searchNodeByCondition(::grpc::ServerContext* context, const ::network::Query* request, ::network::QueryResponse* response);
    virtual ::grpc::Status searchNode(::grpc::ServerContext* context, const ::network::Query* request, ::network::QueryResponse* response);
    virtual ::grpc::Status auth(::grpc::ServerContext* context, const ::network::Credentials* request, ::network::AuthResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_executeQuery : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_executeQuery() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_executeQuery() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status executeQuery(::grpc::ServerContext* /*context*/, const ::network::Query* /*request*/, ::network::QueryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestexecuteQuery(::grpc::ServerContext* context, ::network::Query* request, ::grpc::ServerAsyncResponseWriter< ::network::QueryResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_createNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_createNode() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_createNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status createNode(::grpc::ServerContext* /*context*/, const ::network::Query* /*request*/, ::network::QueryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestcreateNode(::grpc::ServerContext* context, ::network::Query* request, ::grpc::ServerAsyncResponseWriter< ::network::QueryResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_deleteNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_deleteNode() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_deleteNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status deleteNode(::grpc::ServerContext* /*context*/, const ::network::Query* /*request*/, ::network::QueryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestdeleteNode(::grpc::ServerContext* context, ::network::Query* request, ::grpc::ServerAsyncResponseWriter< ::network::QueryResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_createRelation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_createRelation() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_createRelation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status createRelation(::grpc::ServerContext* /*context*/, const ::network::Query* /*request*/, ::network::QueryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestcreateRelation(::grpc::ServerContext* context, ::network::Query* request, ::grpc::ServerAsyncResponseWriter< ::network::QueryResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_createEdge : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_createEdge() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_createEdge() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status createEdge(::grpc::ServerContext* /*context*/, const ::network::Query* /*request*/, ::network::QueryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestcreateEdge(::grpc::ServerContext* context, ::network::Query* request, ::grpc::ServerAsyncResponseWriter< ::network::QueryResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_deleteEdge : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_deleteEdge() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_deleteEdge() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status deleteEdge(::grpc::ServerContext* /*context*/, const ::network::Query* /*request*/, ::network::QueryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestdeleteEdge(::grpc::ServerContext* context, ::network::Query* request, ::grpc::ServerAsyncResponseWriter< ::network::QueryResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_searchNodeById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_searchNodeById() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_searchNodeById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status searchNodeById(::grpc::ServerContext* /*context*/, const ::network::Query* /*request*/, ::network::QueryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsearchNodeById(::grpc::ServerContext* context, ::network::Query* request, ::grpc::ServerAsyncResponseWriter< ::network::QueryResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_searchNodeByCondition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_searchNodeByCondition() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_searchNodeByCondition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status searchNodeByCondition(::grpc::ServerContext* /*context*/, const ::network::Query* /*request*/, ::network::QueryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsearchNodeByCondition(::grpc::ServerContext* context, ::network::Query* request, ::grpc::ServerAsyncResponseWriter< ::network::QueryResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_searchNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_searchNode() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_searchNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status searchNode(::grpc::ServerContext* /*context*/, const ::network::Query* /*request*/, ::network::QueryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsearchNode(::grpc::ServerContext* context, ::network::Query* request, ::grpc::ServerAsyncResponseWriter< ::network::QueryResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_auth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_auth() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_auth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status auth(::grpc::ServerContext* /*context*/, const ::network::Credentials* /*request*/, ::network::AuthResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestauth(::grpc::ServerContext* context, ::network::Credentials* request, ::grpc::ServerAsyncResponseWriter< ::network::AuthResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_executeQuery<WithAsyncMethod_createNode<WithAsyncMethod_deleteNode<WithAsyncMethod_createRelation<WithAsyncMethod_createEdge<WithAsyncMethod_deleteEdge<WithAsyncMethod_searchNodeById<WithAsyncMethod_searchNodeByCondition<WithAsyncMethod_searchNode<WithAsyncMethod_auth<Service > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_executeQuery : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_executeQuery() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::network::Query, ::network::QueryResponse>(
          [this](::grpc::ServerContext* context,
                 const ::network::Query* request,
                 ::network::QueryResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->executeQuery(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_executeQuery(
        ::grpc::experimental::MessageAllocator< ::network::Query, ::network::QueryResponse>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::network::Query, ::network::QueryResponse>*>(
          ::grpc::Service::experimental().GetHandler(0))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_executeQuery() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status executeQuery(::grpc::ServerContext* /*context*/, const ::network::Query* /*request*/, ::network::QueryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void executeQuery(::grpc::ServerContext* /*context*/, const ::network::Query* /*request*/, ::network::QueryResponse* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_createNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_createNode() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::network::Query, ::network::QueryResponse>(
          [this](::grpc::ServerContext* context,
                 const ::network::Query* request,
                 ::network::QueryResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->createNode(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_createNode(
        ::grpc::experimental::MessageAllocator< ::network::Query, ::network::QueryResponse>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::network::Query, ::network::QueryResponse>*>(
          ::grpc::Service::experimental().GetHandler(1))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_createNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status createNode(::grpc::ServerContext* /*context*/, const ::network::Query* /*request*/, ::network::QueryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void createNode(::grpc::ServerContext* /*context*/, const ::network::Query* /*request*/, ::network::QueryResponse* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_deleteNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_deleteNode() {
      ::grpc::Service::experimental().MarkMethodCallback(2,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::network::Query, ::network::QueryResponse>(
          [this](::grpc::ServerContext* context,
                 const ::network::Query* request,
                 ::network::QueryResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->deleteNode(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_deleteNode(
        ::grpc::experimental::MessageAllocator< ::network::Query, ::network::QueryResponse>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::network::Query, ::network::QueryResponse>*>(
          ::grpc::Service::experimental().GetHandler(2))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_deleteNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status deleteNode(::grpc::ServerContext* /*context*/, const ::network::Query* /*request*/, ::network::QueryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void deleteNode(::grpc::ServerContext* /*context*/, const ::network::Query* /*request*/, ::network::QueryResponse* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_createRelation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_createRelation() {
      ::grpc::Service::experimental().MarkMethodCallback(3,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::network::Query, ::network::QueryResponse>(
          [this](::grpc::ServerContext* context,
                 const ::network::Query* request,
                 ::network::QueryResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->createRelation(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_createRelation(
        ::grpc::experimental::MessageAllocator< ::network::Query, ::network::QueryResponse>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::network::Query, ::network::QueryResponse>*>(
          ::grpc::Service::experimental().GetHandler(3))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_createRelation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status createRelation(::grpc::ServerContext* /*context*/, const ::network::Query* /*request*/, ::network::QueryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void createRelation(::grpc::ServerContext* /*context*/, const ::network::Query* /*request*/, ::network::QueryResponse* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_createEdge : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_createEdge() {
      ::grpc::Service::experimental().MarkMethodCallback(4,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::network::Query, ::network::QueryResponse>(
          [this](::grpc::ServerContext* context,
                 const ::network::Query* request,
                 ::network::QueryResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->createEdge(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_createEdge(
        ::grpc::experimental::MessageAllocator< ::network::Query, ::network::QueryResponse>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::network::Query, ::network::QueryResponse>*>(
          ::grpc::Service::experimental().GetHandler(4))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_createEdge() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status createEdge(::grpc::ServerContext* /*context*/, const ::network::Query* /*request*/, ::network::QueryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void createEdge(::grpc::ServerContext* /*context*/, const ::network::Query* /*request*/, ::network::QueryResponse* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_deleteEdge : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_deleteEdge() {
      ::grpc::Service::experimental().MarkMethodCallback(5,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::network::Query, ::network::QueryResponse>(
          [this](::grpc::ServerContext* context,
                 const ::network::Query* request,
                 ::network::QueryResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->deleteEdge(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_deleteEdge(
        ::grpc::experimental::MessageAllocator< ::network::Query, ::network::QueryResponse>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::network::Query, ::network::QueryResponse>*>(
          ::grpc::Service::experimental().GetHandler(5))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_deleteEdge() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status deleteEdge(::grpc::ServerContext* /*context*/, const ::network::Query* /*request*/, ::network::QueryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void deleteEdge(::grpc::ServerContext* /*context*/, const ::network::Query* /*request*/, ::network::QueryResponse* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_searchNodeById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_searchNodeById() {
      ::grpc::Service::experimental().MarkMethodCallback(6,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::network::Query, ::network::QueryResponse>(
          [this](::grpc::ServerContext* context,
                 const ::network::Query* request,
                 ::network::QueryResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->searchNodeById(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_searchNodeById(
        ::grpc::experimental::MessageAllocator< ::network::Query, ::network::QueryResponse>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::network::Query, ::network::QueryResponse>*>(
          ::grpc::Service::experimental().GetHandler(6))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_searchNodeById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status searchNodeById(::grpc::ServerContext* /*context*/, const ::network::Query* /*request*/, ::network::QueryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void searchNodeById(::grpc::ServerContext* /*context*/, const ::network::Query* /*request*/, ::network::QueryResponse* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_searchNodeByCondition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_searchNodeByCondition() {
      ::grpc::Service::experimental().MarkMethodCallback(7,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::network::Query, ::network::QueryResponse>(
          [this](::grpc::ServerContext* context,
                 const ::network::Query* request,
                 ::network::QueryResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->searchNodeByCondition(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_searchNodeByCondition(
        ::grpc::experimental::MessageAllocator< ::network::Query, ::network::QueryResponse>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::network::Query, ::network::QueryResponse>*>(
          ::grpc::Service::experimental().GetHandler(7))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_searchNodeByCondition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status searchNodeByCondition(::grpc::ServerContext* /*context*/, const ::network::Query* /*request*/, ::network::QueryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void searchNodeByCondition(::grpc::ServerContext* /*context*/, const ::network::Query* /*request*/, ::network::QueryResponse* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_searchNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_searchNode() {
      ::grpc::Service::experimental().MarkMethodCallback(8,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::network::Query, ::network::QueryResponse>(
          [this](::grpc::ServerContext* context,
                 const ::network::Query* request,
                 ::network::QueryResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->searchNode(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_searchNode(
        ::grpc::experimental::MessageAllocator< ::network::Query, ::network::QueryResponse>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::network::Query, ::network::QueryResponse>*>(
          ::grpc::Service::experimental().GetHandler(8))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_searchNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status searchNode(::grpc::ServerContext* /*context*/, const ::network::Query* /*request*/, ::network::QueryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void searchNode(::grpc::ServerContext* /*context*/, const ::network::Query* /*request*/, ::network::QueryResponse* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_auth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_auth() {
      ::grpc::Service::experimental().MarkMethodCallback(9,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::network::Credentials, ::network::AuthResponse>(
          [this](::grpc::ServerContext* context,
                 const ::network::Credentials* request,
                 ::network::AuthResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->auth(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_auth(
        ::grpc::experimental::MessageAllocator< ::network::Credentials, ::network::AuthResponse>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::network::Credentials, ::network::AuthResponse>*>(
          ::grpc::Service::experimental().GetHandler(9))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_auth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status auth(::grpc::ServerContext* /*context*/, const ::network::Credentials* /*request*/, ::network::AuthResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void auth(::grpc::ServerContext* /*context*/, const ::network::Credentials* /*request*/, ::network::AuthResponse* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_executeQuery<ExperimentalWithCallbackMethod_createNode<ExperimentalWithCallbackMethod_deleteNode<ExperimentalWithCallbackMethod_createRelation<ExperimentalWithCallbackMethod_createEdge<ExperimentalWithCallbackMethod_deleteEdge<ExperimentalWithCallbackMethod_searchNodeById<ExperimentalWithCallbackMethod_searchNodeByCondition<ExperimentalWithCallbackMethod_searchNode<ExperimentalWithCallbackMethod_auth<Service > > > > > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_executeQuery : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_executeQuery() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_executeQuery() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status executeQuery(::grpc::ServerContext* /*context*/, const ::network::Query* /*request*/, ::network::QueryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_createNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_createNode() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_createNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status createNode(::grpc::ServerContext* /*context*/, const ::network::Query* /*request*/, ::network::QueryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_deleteNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_deleteNode() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_deleteNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status deleteNode(::grpc::ServerContext* /*context*/, const ::network::Query* /*request*/, ::network::QueryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_createRelation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_createRelation() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_createRelation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status createRelation(::grpc::ServerContext* /*context*/, const ::network::Query* /*request*/, ::network::QueryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_createEdge : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_createEdge() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_createEdge() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status createEdge(::grpc::ServerContext* /*context*/, const ::network::Query* /*request*/, ::network::QueryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_deleteEdge : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_deleteEdge() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_deleteEdge() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status deleteEdge(::grpc::ServerContext* /*context*/, const ::network::Query* /*request*/, ::network::QueryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_searchNodeById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_searchNodeById() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_searchNodeById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status searchNodeById(::grpc::ServerContext* /*context*/, const ::network::Query* /*request*/, ::network::QueryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_searchNodeByCondition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_searchNodeByCondition() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_searchNodeByCondition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status searchNodeByCondition(::grpc::ServerContext* /*context*/, const ::network::Query* /*request*/, ::network::QueryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_searchNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_searchNode() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_searchNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status searchNode(::grpc::ServerContext* /*context*/, const ::network::Query* /*request*/, ::network::QueryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_auth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_auth() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_auth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status auth(::grpc::ServerContext* /*context*/, const ::network::Credentials* /*request*/, ::network::AuthResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_executeQuery : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_executeQuery() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_executeQuery() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status executeQuery(::grpc::ServerContext* /*context*/, const ::network::Query* /*request*/, ::network::QueryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestexecuteQuery(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_createNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_createNode() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_createNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status createNode(::grpc::ServerContext* /*context*/, const ::network::Query* /*request*/, ::network::QueryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestcreateNode(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_deleteNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_deleteNode() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_deleteNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status deleteNode(::grpc::ServerContext* /*context*/, const ::network::Query* /*request*/, ::network::QueryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestdeleteNode(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_createRelation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_createRelation() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_createRelation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status createRelation(::grpc::ServerContext* /*context*/, const ::network::Query* /*request*/, ::network::QueryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestcreateRelation(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_createEdge : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_createEdge() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_createEdge() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status createEdge(::grpc::ServerContext* /*context*/, const ::network::Query* /*request*/, ::network::QueryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestcreateEdge(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_deleteEdge : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_deleteEdge() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_deleteEdge() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status deleteEdge(::grpc::ServerContext* /*context*/, const ::network::Query* /*request*/, ::network::QueryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestdeleteEdge(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_searchNodeById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_searchNodeById() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_searchNodeById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status searchNodeById(::grpc::ServerContext* /*context*/, const ::network::Query* /*request*/, ::network::QueryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsearchNodeById(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_searchNodeByCondition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_searchNodeByCondition() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_searchNodeByCondition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status searchNodeByCondition(::grpc::ServerContext* /*context*/, const ::network::Query* /*request*/, ::network::QueryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsearchNodeByCondition(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_searchNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_searchNode() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_searchNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status searchNode(::grpc::ServerContext* /*context*/, const ::network::Query* /*request*/, ::network::QueryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsearchNode(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_auth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_auth() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_auth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status auth(::grpc::ServerContext* /*context*/, const ::network::Credentials* /*request*/, ::network::AuthResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestauth(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_executeQuery : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_executeQuery() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->executeQuery(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_executeQuery() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status executeQuery(::grpc::ServerContext* /*context*/, const ::network::Query* /*request*/, ::network::QueryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void executeQuery(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_createNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_createNode() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->createNode(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_createNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status createNode(::grpc::ServerContext* /*context*/, const ::network::Query* /*request*/, ::network::QueryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void createNode(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_deleteNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_deleteNode() {
      ::grpc::Service::experimental().MarkMethodRawCallback(2,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->deleteNode(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_deleteNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status deleteNode(::grpc::ServerContext* /*context*/, const ::network::Query* /*request*/, ::network::QueryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void deleteNode(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_createRelation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_createRelation() {
      ::grpc::Service::experimental().MarkMethodRawCallback(3,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->createRelation(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_createRelation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status createRelation(::grpc::ServerContext* /*context*/, const ::network::Query* /*request*/, ::network::QueryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void createRelation(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_createEdge : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_createEdge() {
      ::grpc::Service::experimental().MarkMethodRawCallback(4,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->createEdge(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_createEdge() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status createEdge(::grpc::ServerContext* /*context*/, const ::network::Query* /*request*/, ::network::QueryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void createEdge(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_deleteEdge : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_deleteEdge() {
      ::grpc::Service::experimental().MarkMethodRawCallback(5,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->deleteEdge(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_deleteEdge() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status deleteEdge(::grpc::ServerContext* /*context*/, const ::network::Query* /*request*/, ::network::QueryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void deleteEdge(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_searchNodeById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_searchNodeById() {
      ::grpc::Service::experimental().MarkMethodRawCallback(6,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->searchNodeById(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_searchNodeById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status searchNodeById(::grpc::ServerContext* /*context*/, const ::network::Query* /*request*/, ::network::QueryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void searchNodeById(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_searchNodeByCondition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_searchNodeByCondition() {
      ::grpc::Service::experimental().MarkMethodRawCallback(7,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->searchNodeByCondition(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_searchNodeByCondition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status searchNodeByCondition(::grpc::ServerContext* /*context*/, const ::network::Query* /*request*/, ::network::QueryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void searchNodeByCondition(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_searchNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_searchNode() {
      ::grpc::Service::experimental().MarkMethodRawCallback(8,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->searchNode(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_searchNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status searchNode(::grpc::ServerContext* /*context*/, const ::network::Query* /*request*/, ::network::QueryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void searchNode(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_auth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_auth() {
      ::grpc::Service::experimental().MarkMethodRawCallback(9,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->auth(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_auth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status auth(::grpc::ServerContext* /*context*/, const ::network::Credentials* /*request*/, ::network::AuthResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void auth(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_executeQuery : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_executeQuery() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::network::Query, ::network::QueryResponse>(std::bind(&WithStreamedUnaryMethod_executeQuery<BaseClass>::StreamedexecuteQuery, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_executeQuery() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status executeQuery(::grpc::ServerContext* /*context*/, const ::network::Query* /*request*/, ::network::QueryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedexecuteQuery(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::network::Query,::network::QueryResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_createNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_createNode() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::network::Query, ::network::QueryResponse>(std::bind(&WithStreamedUnaryMethod_createNode<BaseClass>::StreamedcreateNode, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_createNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status createNode(::grpc::ServerContext* /*context*/, const ::network::Query* /*request*/, ::network::QueryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedcreateNode(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::network::Query,::network::QueryResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_deleteNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_deleteNode() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::network::Query, ::network::QueryResponse>(std::bind(&WithStreamedUnaryMethod_deleteNode<BaseClass>::StreameddeleteNode, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_deleteNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status deleteNode(::grpc::ServerContext* /*context*/, const ::network::Query* /*request*/, ::network::QueryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreameddeleteNode(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::network::Query,::network::QueryResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_createRelation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_createRelation() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::network::Query, ::network::QueryResponse>(std::bind(&WithStreamedUnaryMethod_createRelation<BaseClass>::StreamedcreateRelation, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_createRelation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status createRelation(::grpc::ServerContext* /*context*/, const ::network::Query* /*request*/, ::network::QueryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedcreateRelation(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::network::Query,::network::QueryResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_createEdge : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_createEdge() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::network::Query, ::network::QueryResponse>(std::bind(&WithStreamedUnaryMethod_createEdge<BaseClass>::StreamedcreateEdge, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_createEdge() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status createEdge(::grpc::ServerContext* /*context*/, const ::network::Query* /*request*/, ::network::QueryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedcreateEdge(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::network::Query,::network::QueryResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_deleteEdge : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_deleteEdge() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler< ::network::Query, ::network::QueryResponse>(std::bind(&WithStreamedUnaryMethod_deleteEdge<BaseClass>::StreameddeleteEdge, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_deleteEdge() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status deleteEdge(::grpc::ServerContext* /*context*/, const ::network::Query* /*request*/, ::network::QueryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreameddeleteEdge(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::network::Query,::network::QueryResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_searchNodeById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_searchNodeById() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler< ::network::Query, ::network::QueryResponse>(std::bind(&WithStreamedUnaryMethod_searchNodeById<BaseClass>::StreamedsearchNodeById, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_searchNodeById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status searchNodeById(::grpc::ServerContext* /*context*/, const ::network::Query* /*request*/, ::network::QueryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedsearchNodeById(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::network::Query,::network::QueryResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_searchNodeByCondition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_searchNodeByCondition() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler< ::network::Query, ::network::QueryResponse>(std::bind(&WithStreamedUnaryMethod_searchNodeByCondition<BaseClass>::StreamedsearchNodeByCondition, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_searchNodeByCondition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status searchNodeByCondition(::grpc::ServerContext* /*context*/, const ::network::Query* /*request*/, ::network::QueryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedsearchNodeByCondition(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::network::Query,::network::QueryResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_searchNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_searchNode() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler< ::network::Query, ::network::QueryResponse>(std::bind(&WithStreamedUnaryMethod_searchNode<BaseClass>::StreamedsearchNode, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_searchNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status searchNode(::grpc::ServerContext* /*context*/, const ::network::Query* /*request*/, ::network::QueryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedsearchNode(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::network::Query,::network::QueryResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_auth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_auth() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler< ::network::Credentials, ::network::AuthResponse>(std::bind(&WithStreamedUnaryMethod_auth<BaseClass>::Streamedauth, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_auth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status auth(::grpc::ServerContext* /*context*/, const ::network::Credentials* /*request*/, ::network::AuthResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedauth(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::network::Credentials,::network::AuthResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_executeQuery<WithStreamedUnaryMethod_createNode<WithStreamedUnaryMethod_deleteNode<WithStreamedUnaryMethod_createRelation<WithStreamedUnaryMethod_createEdge<WithStreamedUnaryMethod_deleteEdge<WithStreamedUnaryMethod_searchNodeById<WithStreamedUnaryMethod_searchNodeByCondition<WithStreamedUnaryMethod_searchNode<WithStreamedUnaryMethod_auth<Service > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_executeQuery<WithStreamedUnaryMethod_createNode<WithStreamedUnaryMethod_deleteNode<WithStreamedUnaryMethod_createRelation<WithStreamedUnaryMethod_createEdge<WithStreamedUnaryMethod_deleteEdge<WithStreamedUnaryMethod_searchNodeById<WithStreamedUnaryMethod_searchNodeByCondition<WithStreamedUnaryMethod_searchNode<WithStreamedUnaryMethod_auth<Service > > > > > > > > > > StreamedService;
};

}  // namespace network


#endif  // GRPC_network_2eproto__INCLUDED
